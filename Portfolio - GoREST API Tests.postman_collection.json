{
	"info": {
		"_postman_id": "35c9c87c-fa5f-4ec1-b32b-0213c4802325",
		"name": "Portfolio - GoREST API Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "43110001",
		"_collection_link": "https://bold-flare-219104.postman.co/workspace/Team-Workspace~a529b750-ddff-4d1c-8be1-0199ed1a50c0/collection/43110001-35c9c87c-fa5f-4ec1-b32b-0213c4802325?action=share&source=collection_link&creator=43110001"
	},
	"item": [
		{
			"name": "[GET] Pobierz listę użytkowników",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status odpowiedzi to 200 OK\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Treść odpowiedzi jest tablicą\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody).to.be.an('array');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/users",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "[GET-Negative] Próba pobrania nieistniejącego użytkownika",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status odpowiedzi to 404 Not Found\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Odpowiedź zawiera komunikat 'Resource not found'\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.message).to.eql('Resource not found');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/users/0",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users",
						"0"
					]
				}
			},
			"response": []
		},
		{
			"name": "[POST] Stwórz nowego użytkownika",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status odpowiedzi to 201 Created\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"pm.test(\"ID nowego użytkownika zostało zapisane\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.environment.set(\"userId\", responseBody.id);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Adam Tester Nowy\",\r\n    \"email\": \"adam.tester.{{$randomFirstName}}@test.io\",\r\n    \"gender\": \"male\",\r\n    \"status\": \"active\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/users",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "[POST-Negative] Próba stworzenia użytkownika bez autoryzacji",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status odpowiedzi to 401 Unauthorized\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"pm.test(\"Odpowiedź zawiera komunikat o braku autentykacji\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody.message).to.eql('Authentication failed');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Adam Tester Nowy\",\r\n    \"email\": \"adam.tester.{{$randomFirstName}}@test.io\",\r\n    \"gender\": \"male\",\r\n    \"status\": \"active\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/users",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "[POST-Negative] Próba stworzenia użytkownika z zajętym e-mailem",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status odpowiedzi to 422 Unprocessable Entity\", function () {\r",
							"    pm.response.to.have.status(422);\r",
							"});\r",
							"\r",
							"pm.test(\"Odpowiedź zawiera komunikat o zajętym adresie e-mail\", function () {\r",
							"    const responseBody = pm.response.json();\r",
							"    pm.expect(responseBody[0].field).to.eql('email');\r",
							"    pm.expect(responseBody[0].message).to.eql('has already been taken');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Duplikat Tester\",\r\n    \"email\": \"duplikat.testera.12345@test.io\",\r\n    \"gender\": \"male\",\r\n    \"status\": \"active\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/users",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "[DELETE] Usuń stworzonego użytkownika",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status odpowiedzi to 204 No Content\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{accessToken}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"Adam Tester Nowy\",\r\n    \"email\": \"adam.tester.{{$randomFirstName}}@test.io\",\r\n    \"gender\": \"male\",\r\n    \"status\": \"active\"\r\n}"
				},
				"url": {
					"raw": "{{baseURL}}/users/{{userId}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"users",
						"{{userId}}"
					]
				}
			},
			"response": []
		}
	]
}